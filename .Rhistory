for (i in 1:3)
{
j <<- j + 1
results[nrow(results)+1,] <- crossover(decayRate=i/(2*L))
print(tail(results,1))
j <<- j + 1
results[nrow(results)+1,] <- noCrossover(decayRate=i/(2*L))
print(tail(results,1))
}
# We expect that higher mutation rate would improve the effect of crossover because a larger proportion of the
# population will have mutations which increases the likelihood they benefitially contribute to the child. On
# the other hand lower mutation rates are likely to do the oposite: if you imagine the case where mutation
# rates are << 1 per individual then at any one time there is likely a maximum of 1 individual with higher fitness
# than the others, in this case crossover will be meaningless and possibly harmful as it has a 50% chance to remove
# the benefitial change of that one individual. In this case mutations happen one at a time then propagate slowly
# through the population.
# Question 2b. How does the best of the GAs compare to the speed of the mutation hill-climber
for (i in 1:5)
{
j <<- j + 1
results[nrow(results)+1,] <- hillClimber()
print(tail(results,1))
}
View(results)
str(results)
head(results)
library(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(ggplot2)
install.packages("ggplot2"
)
library(ggplot2)
View(results)
?select
?filter
?qplot
qplot(iterations ~ method, data=results[1:10,])
qplot(iterations, fill=method, data=results[1:10,])
qplot(iterations, facets = .~method, data=results[1:10,])
qplot(loopNum ~ iterations, facets = .~method, data=results[1:10,])
qplot(loopNum~iterations, facets = .~method, data=results[1:10,])
qplot(loopNum~., facets = .~method, data=results[1:10,])
results[1:10,] %>% group_by(method)
qplot(iterations, facets = .~method, data=results[1:10,], geom="boxplot")
boxplot(results1[1:10, c(c("method","iterations")])
boxplot(results1[1:10, (c("method","iterations")])
boxplot(results1[1:10, c("method","iterations")])
boxplot(results[1:10, c("method","iterations")])
(results[1:10, c("method","iterations")])
results$popSize <- as.integer(results$popSize)
results[1]
results[[1]]
results
str(results)
lapply(results, str)
sapply(results, str)
sapply(results, size)
sapply(results, length)
results[1:10,] %>% select(-method, -target, -solution)
results[1:10,c(popSize)]
results[1:10,popSize]
results[1:10,"popSize"]
results[1:10,c("popSize", "decayRate", "iterations", "fitness", "loopNum"]
results[1:10,c("popSize", "decayRate", "iterations", "fitness", "loopNum")]
results[1:10,c("popSize", "decayRate", "iterations", "fitness", "loopNum")] <- as.numeric(results[1:10,c("popSize", "decayRate", "iterations", "fitness", "loopNum")])
results[results[1:10,c("popSize", "decayRate", "iterations", "fitness", "loopNum")]]
results[1:10,c("popSize", "decayRate", "iterations", "fitness", "loopNum")]
results[c("popSize", "decayRate", "iterations", "fitness", "loopNum")]
results[cols]
cols <- c("popSize", "decayRate", "iterations", "fitness", "loopNum")
results[cols]
results[cols] <- sapply(results[cols], as.numeric)
cols.num <- c("popSize", "decayRate", "iterations", "fitness", "loopNum")
results[!cols.num]
results[!=cols.num]
cols.fac <- c("method", "target", "solution")]
cols.fac <- c("method", "target", "solution")
results[cols.fac] <- sapply(results[cols.fac], as.factor)
cols.num <- c("popSize", "decayRate", "iterations", "fitness", "loopNum")
cols.fac <- c("method", "target", "solution")
results[cols.num] <- sapply(results[cols.num], as.numeric)
results[cols.fac] <- sapply(results[cols.fac], as.factor)
str(results)
boxplot(results[1:10, c("method", "iterations")])
boxplot(results[1:10, "iterations"])
results[cols.fac] <- sapply(results[cols.fac], as.factor)
summary(results)
results[cols.fac] <- sapply(results[cols.fac], as.factor)
?as.factor
results[cols.fac] <- sapply(results[cols.fac], factor)
results[1:10, "method"]
str(results[1:10, "method"])
summary(results[1:10, "method"])
summary(as.factor(results[1:10, "method"]))
results[cols.fac] <- sapply(results[cols.fac], as.factor)
cols.fac <- c("method", "target", "solution")
results[cols.fac] <- sapply(results[cols.fac], as.factor)
summary(results)
results$method <- as.factor(results$method)
?colClasses
?plyr
results[cols.num] <- lapply(results[cols.num], as.numeric)
results[cols.fac] <- lapply(results[cols.fac], as.factor)
qplot(results[1:10, c("method","iterations")])
results[1:10, c("method","iterations")]
ggplot(results[1:10, c("method","iterations")], aes(iterations))
ggplot(results[1:10, c("method","iterations")], aes(iterations)) +
geom_point()
ggplot(results[1:10, c("method","iterations")], aes(x=iterations)) +
geom_bar()
ggplot(results[1:10, c("method","iterations")], aes(y=iterations)) +
geom_bar()
ggplot(results[1:10, c("method","iterations")], aes(x=iterations)) +
geom_boxplot()
ggplot(results[1:10, c("method","iterations")], aes(y=iterations)) +
geom_boxplot()
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot()
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_bar() +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_point() +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_point() +
geom_boxplot() +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot() +
geom_point() +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot(alpha=0.5) +
geom_point() +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot(alpha=0.8) +
geom_point() +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot(aes(alpha=0.8)) +
geom_point() +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot(aes(alpha=0.8)) +
geom_point(size=4) +
labs(title="Comparing crossover to mutation")
?geom_point
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot(aes(alpha=0.8)) +
geom_point(size=3, shape = x) +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot(aes(alpha=0.8)) +
geom_point(size=3, shape = 2) +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot(aes(alpha=0.8)) +
geom_point(size=3, shape = 3) +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot(aes(alpha=0.8)) +
geom_point(size=3, shape = 4) +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot(aes(alpha=0.8)) +
geom_point(size=3, shape = 5) +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot(aes(alpha=0.8)) +
geom_point(size=3, shape = 6) +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot(aes(alpha=0.8)) +
geom_point(size=3, shape = 7) +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot(aes(alpha=0.8)) +
geom_point(size=3, shape = 4) +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot(aes(alpha=0.8)) +
geom_point(size=5, shape = 4) +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot(aes(alpha=0.8)) +
geom_point(size=5, shape = *) +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot(aes(alpha=0.8)) +
geom_point(size=5, shape = *) +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot(aes(alpha=0.8)) +
geom_point(size=5, shape = .) +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot(aes(alpha=0.8)) +
geom_point(size=5, shape = 16) +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot(aes(alpha=0.8)) +
geom_point(size=4, shape = 16) +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot(aes(alpha=0.8)) +
geom_point(size=4, shape = 16, alpha=0.7) +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot() +
geom_point(size=4, shape = 16) +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","iterations")], aes(x=method,y=log(iterations))) +
geom_boxplot() +
geom_point(size=4, shape = 16) +
labs(title="Comparing crossover to mutation")
ggplot(results[1:10, c("method","target")], aes(x=method,y=iterations)) +
geom_boxplot() +
geom_point(size=4, shape = 16) +
labs(title="Comparing target complexity")
ggplot(results[11:18, c("iterations","target")], aes(x=target(,y=iterations)) +
geom_boxplot() +
geom_point(size=4, shape = 16) +
labs(title="Comparing target complexity")
ggplot(results[11:18, c("iterations","target")], aes(x=target,y=iterations)) +
geom_boxplot() +
geom_point(size=4, shape = 16) +
labs(title="Comparing target complexity")
results[11:18, c("iterations","target")]
ggplot(results[11:18, c("target","iterations")], aes(x=target,y=iterations)) +
geom_boxplot()
ggplot(results[11:18, c("target","iterations")], aes(x=target,y=iterations)) +
geom_boxplot() +
geom_point(size=4, shape = 16)
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=iterations)) +
geom_boxplot() +
geom_point(size=4, shape = 16, colour=method)
results[11:18, c("target","iterations", "method")]
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=iterations)) +
geom_boxplot() +
geom_point(size=4, shape = 16, colour=method)
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=iterations, colour=method)) +
geom_boxplot() +
geom_point(size=4, shape = 16)
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=iterations, colour=method)) +
geom_point(size=4, shape = 16)
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=log(iterations), colour=method)) +
geom_point(size=4, shape = 16)
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=log(iterations), colour=method)) +
geom_point(size=4, shape = 16) +
geom_smooth() +
labs(title="Comparing target complexity")
?geom_smooth
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=log(iterations), group=method)) +
geom_point(size=4, shape = 16) +
geom_smooth()
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=log(iterations), group=method)) +
geom_point(size=4, shape = 16, colour=group) +
geom_smooth()
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=log(iterations), group=method, colour=group)) +
geom_point(size=4, shape = 16) +
geom_smooth() +
labs(title="Comparing target complexity")
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=log(iterations), group=method, colour=method)) +
geom_point(size=4, shape = 16) +
geom_smooth() +
labs(title="Comparing target complexity")
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=log(iterations), group=method, colour=method)) +
geom_point(size=4, shape = 16) +
geom_smooth(method="lm") +
labs(title="Comparing target complexity")
?geom_smooth
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=log(iterations), group=method, colour=method)) +
geom_point(size=4, shape = 16) +
geom_smooth(method="glm") +
labs(title="Comparing target complexity")
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=iterations, group=method, colour=method)) +
geom_point(size=4, shape = 16) +
geom_smooth(method="glm") +
labs(title="Comparing target complexity")
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=iterations, group=method, colour=method)) +
geom_point(size=4, shape = 16) +
geom_smooth(method="gam") +
labs(title="Comparing target complexity")
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=iterations, group=method, colour=method)) +
geom_point(size=4, shape = 16) +
geom_smooth(method="rlm") +
labs(title="Comparing target complexity")
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=iterations, group=method, colour=method)) +
geom_point(size=4, shape = 16) +
geom_smooth(method="glm") +
labs(title="Comparing target complexity")
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=iterations, group=method, colour=method)) +
geom_point(size=4, shape = 16) +
geom_smooth(method="lm") +
labs(title="Comparing target complexity")
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=iterations, group=method, colour=method)) +
geom_point(size=4, shape = 16) +
geom_smooth(method="loess") +
labs(title="Comparing target complexity")
warnings()
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=iterations, group=method, colour=method)) +
geom_point(size=4, shape = 16) +
geom_smooth() +
labs(title="Comparing target complexity")
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=iterations, group=method, colour=method)) +
geom_point(size=4, shape = 16) +
geom_smooth(method="rlm") +
labs(title="Comparing target complexity")
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=iterations, group=method, colour=method)) +
geom_point(size=4, shape = 16) +
geom_smooth(method="gam") +
labs(title="Comparing target complexity")
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=log(iterations), group=method, colour=method)) +
geom_point(size=4, shape = 16) +
geom_smooth(method="gam") +
labs(title="Comparing target complexity")
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=iterations, group=method, colour=method)) +
geom_point(size=4, shape = 16) +
labs(title="Comparing target complexity")
ggplot(results[11:18, c("decayRate","iterations", "method")], aes(x=decayRate,y=iterations, group=method, colour=method)) +
geom_point(size=4, shape = 16) +
labs(title="Comparing target complexity")
ggplot(results[19:24, c("decayRate","iterations", "method")], aes(x=decayRate,y=iterations, group=method, colour=method)) +
geom_point(size=4, shape = 16) +
labs(title="Comparing target complexity")
ggplot(results[c(1:10,25:29), c("method","iterations")], aes(x=method,y=iterations)) +
geom_boxplot() +
geom_point(size=4, shape = 16) +
labs(title="Comparing hillclimber")
ggplot(results[c(1:10,25:29), c("method","iterations")], aes(x=method,y=iterations, colour=method)) +
geom_boxplot() +
geom_point(size=4, shape = 16) +
labs(title="Comparing hillclimber")
ggplot(results[c(1:10,25:29), c("method","iterations")], aes(x=method,y=iterations, fill=method)) +
geom_boxplot() +
geom_point(size=4, shape = 16) +
labs(title="Comparing hillclimber")
ggplot(results[11:18, c("target","iterations", "method")], aes(x=target,y=iterations, group=method, colour=method)) +
geom_point(size=4, shape = 16) +
labs(title="Comparing target complexity")
j = 18
min = 5 # range of decay rates = 1/min average decays -> min average decays
for (i in 1:2*min)
{
j <<- j + 1
results[nrow(results)+1,] <- crossover(decayRate=(i/L)*(1/min))
print(tail(results,1))
j <<- j + 1
results[nrow(results)+1,] <- noCrossover(decayRate=(i^2/L)*(1/min^2))
print(tail(results,1))
}
# We expect that higher mutation rate would improve the effect of crossover because a larger proportion of the
# population will have mutations which increases the likelihood they benefitially contribute to the child. On
# the other hand lower mutation rates are likely to do the oposite: if you imagine the case where mutation
# rates are << 1 per individual then at any one time there is likely a maximum of 1 individual with higher fitness
# than the others, in this case crossover will be meaningless and possibly harmful as it has a 50% chance to remove
# the benefitial change of that one individual. In this case mutations happen one at a time then propagate slowly
# through the population.
# Question 2b. How does the best of the GAs compare to the speed of the mutation hill-climber
for (i in 1:5)
{
j <<- j + 1
results[nrow(results)+1,] <- hillClimber()
print(tail(results,1))
}
View(results)
library(data.table)
fit <- data.frame()
j = 0
maxIter = 2000
results <- data.frame(method=character(),popSize=integer(),decayRate=numeric(),target=character(),solution=character(),iterations=numeric(),fitness=integer(),loopNum=integer(),stringsAsFactors = FALSE)
source("EvolutionaryAlgorithm.R")
## Scripting runs to test hypothesis
# The benefit of crossover is to propagate the benefitial mutations from multiple individuals.
# Consider that in the no crossover case some of the individuals in the population may
# positively mutate one allele but another mutates positively 3 alleles, without crossover the
# benefits of the individual who doesn't win the tournament in the next generation are lost,
# but with crossover some of these benefits can be carried onto the next generation.
# Question 1. Is it true that crossover is faster than no crossover?
set.seed(99) #set the seed for reproducibility
for (i in 1:5)
{
j <<- j + 1
results[nrow(results)+1,] <- crossover()
print(tail(results,1))
j <<- j + 1
results[nrow(results)+1,] <- noCrossover()
print(tail(results,1))
}
# As shown the crossover results show signifficant increased speed than non-crossover with no
# overlap between the two. This is as we expect considering the explanation above .
# Question 1b. If the problem was more difficult do you think the answer to the hypothesis would be the same?
phrases = c("Methinks", "Methinks it", "Methinks it is like", "Methinks it is like a weasel")
for (k in 1:3){
for (i in 1:length(phrases))
{
j <<- j + 1
results[nrow(results)+1,] <- crossover(phrase=phrases[i])
print(tail(results,1))
j <<- j + 1
results[nrow(results)+1,] <- noCrossover(phrase=phrases[i])
print(tail(results,1))
}
}
# If the problem was more difficult you still expect crossover to be benefitial. The condition for crossover to
# be benefitial is the probability that multiple individuals in the population have different positives mutations.
# In the case where there is local optima we expect crossover to perform a little worse by these optima in the
# same way described below, the chance of a mutation jumping peaks out of a local optima << 1 so the benefit
# of crossover isn't present in these situations but there is a chance that the positive mutation be wiped
# out by the crossover (more than 50% in the case where more than one allele was needed to change which is
# certainly the case for local optima).
# Question 2. Does using a higher mutation rate affect the result? Why?
min = 5 # range of decay rates = 1/min average decays -> min average decays
for (i in 1:(2*min))
{
j <<- j + 1
results[nrow(results)+1,] <- crossover(decayRate=(i/(L*min)))
print(tail(results,1))
j <<- j + 1
results[nrow(results)+1,] <- noCrossover(decayRate=(i/(L*min)))
print(tail(results,1))
}
# We expect that higher mutation rate would improve the effect of crossover because a larger proportion of the
# population will have mutations which increases the likelihood they benefitially contribute to the child. On
# the other hand lower mutation rates are likely to do the oposite: if you imagine the case where mutation
# rates are << 1 per individual then at any one time there is likely a maximum of 1 individual with higher fitness
# than the others, in this case crossover will be meaningless and possibly harmful as it has a 50% chance to remove
# the benefitial change of that one individual. In this case mutations happen one at a time then propagate slowly
# through the population.
# Question 2b. How does the best of the GAs compare to the speed of the mutation hill-climber
for (i in 1:5)
{
j <<- j + 1
results[nrow(results)+1,] <- hillClimber()
print(tail(results,1))
}
View(results)
library(data.table)
fit <- data.frame()
j = 0
maxIter = 100000
results <- data.frame(method=character(),popSize=integer(),decayRate=numeric(),target=character(),solution=character(),iterations=numeric(),fitness=integer(),loopNum=integer(),stringsAsFactors = FALSE)
source("EvolutionaryAlgorithm.R")
## Scripting runs to test hypothesis
# The benefit of crossover is to propagate the benefitial mutations from multiple individuals.
# Consider that in the no crossover case some of the individuals in the population may
# positively mutate one allele but another mutates positively 3 alleles, without crossover the
# benefits of the individual who doesn't win the tournament in the next generation are lost,
# but with crossover some of these benefits can be carried onto the next generation.
# Question 1. Is it true that crossover is faster than no crossover?
set.seed(99) #set the seed for reproducibility
for (i in 1:5)
{
j <<- j + 1
results[nrow(results)+1,] <- crossover()
print(tail(results,1))
j <<- j + 1
results[nrow(results)+1,] <- noCrossover()
print(tail(results,1))
}
# As shown the crossover results show signifficant increased speed than non-crossover with no
# overlap between the two. This is as we expect considering the explanation above .
# Question 1b. If the problem was more difficult do you think the answer to the hypothesis would be the same?
phrases = c("Methinks", "Methinks it", "Methinks it is like", "Methinks it is like a weasel")
for (k in 1:3){
for (i in 1:length(phrases))
{
j <<- j + 1
results[nrow(results)+1,] <- crossover(phrase=phrases[i])
print(tail(results,1))
j <<- j + 1
results[nrow(results)+1,] <- noCrossover(phrase=phrases[i])
print(tail(results,1))
}
}
# If the problem was more difficult you still expect crossover to be benefitial. The condition for crossover to
# be benefitial is the probability that multiple individuals in the population have different positives mutations.
# In the case where there is local optima we expect crossover to perform a little worse by these optima in the
# same way described below, the chance of a mutation jumping peaks out of a local optima << 1 so the benefit
# of crossover isn't present in these situations but there is a chance that the positive mutation be wiped
# out by the crossover (more than 50% in the case where more than one allele was needed to change which is
# certainly the case for local optima).
# Question 2. Does using a higher mutation rate affect the result? Why?
min = 5 # range of decay rates = 1/min average decays -> min average decays
for (i in c(.2,.4,.6,.8,1,2,3,4,5))
{
j <<- j + 1
results[nrow(results)+1,] <- crossover(decayRate=(i/(L)))
print(tail(results,1))
j <<- j + 1
results[nrow(results)+1,] <- noCrossover(decayRate=(i/(L)))
print(tail(results,1))
}
# We expect that higher mutation rate would improve the effect of crossover because a larger proportion of the
# population will have mutations which increases the likelihood they benefitially contribute to the child. On
# the other hand lower mutation rates are likely to do the oposite: if you imagine the case where mutation
# rates are << 1 per individual then at any one time there is likely a maximum of 1 individual with higher fitness
# than the others, in this case crossover will be meaningless and possibly harmful as it has a 50% chance to remove
# the benefitial change of that one individual. In this case mutations happen one at a time then propagate slowly
# through the population.
# Question 2b. How does the best of the GAs compare to the speed of the mutation hill-climber
for (i in 1:5)
{
j <<- j + 1
results[nrow(results)+1,] <- hillClimber()
print(tail(results,1))
}
